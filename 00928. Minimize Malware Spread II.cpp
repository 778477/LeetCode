//
//  main.cpp
//  LeetcodeWhiteboard
//
//  Created by miaoyou.gmy on 2018/7/13.
//

#include <iostream>

#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <unordered_map>
#include <unordered_set>

#include <algorithm>
#include <functional>

using namespace std;



/**
 https://leetcode.com/problems/minimize-malware-spread-ii/
 
 (This problem is the same as Minimize Malware Spread, with the differences bolded.)
 
 In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
 
 Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.
 
 Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
 
 We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
 
 
 
 Example 1:
 
 Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 Output: 0
 Example 2:
 
 Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
 Output: 1
 Example 3:
 
 Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
 Output: 1
 
 
 Note:
 
 1 < graph.length = graph[0].length <= 300
 0 <= graph[i][j] == graph[j][i] <= 1
 graph[i][i] = 1
 1 <= initial.length < graph.length
 0 <= initial[i] < graph.length
 
 */

/**
 
 
 39 / 39 test cases passed.
 Status: Accepted
 Runtime: 112 ms
 
 */



// testcase input io faster
static int x = [](){ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);return 0;}();
class Solution {
public:
    int spreadNodes(vector<vector<int>>& graph, int fromNode, vector<bool>& visit){
        int cnt = 0;
        visit[fromNode] = true;
        for(auto idx = 0; idx < graph[fromNode].size(); ++idx){
            if(graph[fromNode][idx] && !visit[idx]){
                cnt += spreadNodes(graph, idx, visit) + 1;
            }
        }
        return cnt;
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int ans = 301;
        int removeNode = 0;
        sort(initial.begin(), initial.end());
        for(int node : initial){
            // step 1. update graph
            vector<vector<int>> tmpGraph = graph;
            for(auto i = 0; i< tmpGraph.size(); ++i){
                tmpGraph[i][node] = 0;
            }
            
            // step 2. count the spread malware node
            int cnt = 0;
            vector<bool> visit(graph.size(), false);
            for(int n : initial){
                if(n == node || visit[n]) continue;
                cnt += spreadNodes(tmpGraph, n, visit) + 1;
            }
            
            if(cnt < ans){
                ans = cnt;
                removeNode = node;
            }
        }
        return removeNode;
    }
};

/*
 
 [[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,1,0,1,0,0],[0,0,0,1,0,0,0,0,0],[0,0,1,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]]
 [6,0,4]
 */

int main(int argc, const char * argv[]) {
    std::ios::sync_with_stdio(false); std::cin.tie(NULL);
    Solution solve;
    vector<vector<int>> graph = {
        {1,0,0,0,0,0,0,0,0},// 0
        {0,1,0,0,0,0,0,0,0},
        {0,0,1,0,1,0,1,0,0},
        {0,0,0,1,0,0,0,0,0},
        {0,0,1,0,1,0,0,0,0},// 4
        {0,0,0,0,0,1,0,0,0},
        {0,0,1,0,0,0,1,0,0},// 6
        {0,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,0,0,0,1}};
    
    vector<int> inital = {6,0,4};
    cout<<solve.minMalwareSpread(graph, inital)<<endl;
    return 0;
}

